@page "/"
@inherits AbstractPage
@using System.Net.Http
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.AspNetCore.WebUtilities
@using Nexar.Client.Token

<MudContainer>
    <MudText>Demo Blazor app powered by <MudLink Href="@AppData.ApiEndpoint" Target="_blank">@AppData.ApiEndpoint</MudLink></MudText>
    <MudForm>
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>
                <MudText>Don't have an account? <MudLink Href="@AppData.NexarDotCom" Target="_blank">Sign Up</MudLink></MudText>

                <MudTextField @bind-Value="@_clientId" Label="Client ID" Placeholder="Client ID"
                              Variant="Variant.Outlined" id="username" name="username"></MudTextField>
                <MudTextField @bind-Value="@_clientSecret" Label="Client secret" Placeholder="Client secret"
                              Variant="Variant.Outlined" InputType="@InputType.Password" id="password" name="password" autocomplete="off" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="@LoginAsync">Sign In</MudButton>
                @if (_loading)
                {
                    <MudProgressCircular Indeterminate="true" />
                }
            </MudCardActions>
        </MudCard>
    </MudForm>
</MudContainer>

@code {
    string _clientId;
    string _clientSecret;
    bool _loading;

    /// <summary>
    /// Get token from the user input, then go to search.
    /// </summary>
    async Task LoginAsync()
    {
        if (string.IsNullOrEmpty(_clientId) || string.IsNullOrEmpty(_clientSecret))
            return;

        try
        {
            _loading = true;
            using var client = new HttpClient();
            AppData.Token = await client.GetNexarTokenAsync(_clientId, _clientSecret, AppData.Authority);
            NavManager.NavigateTo("search");

        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
        }
        finally
        {
            _loading = false;
        }
    }

    /// <summary>
    /// If a token is provided, check its sanity, then go to search.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // skip started
        if (AppData.Token != null)
            return;

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        try
        {
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("mode", out var mode))
            {
                if (Enum.TryParse(mode, true, out Mode value))
                    AppData.NexarMode = value;
                else
                    throw new Exception($"Invalid mode.");
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
            {
                try
                {
                    var tokenHandler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                    var jwtSecurityToken = tokenHandler.ReadJwtToken(token);
                    if (jwtSecurityToken.ValidTo < DateTime.UtcNow.AddSeconds(10))
                        throw new Exception("Expired");
                }
                catch (Exception)
                {
                    throw new Exception("Invalid or expired token.");
                }

                AppData.Token = token;
                NavManager.NavigateTo("search");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
            NavManager.NavigateTo("");
        }
    }
}
