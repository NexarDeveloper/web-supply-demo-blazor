@page "/categories"
@inherits AbstractPage
@inject NexarClient Client

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4" GutterBottom="true">Categories</MudText>
            @if (TreeItems == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                <MudTreeView T="CategoryNode" Items="TreeItems">
                    <ItemTemplate>
                        <MudTreeViewItem Items="@context.Children" Value="@context" Text="@context.Info.Name" />
                    </ItemTemplate>
                </MudTreeView>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    public class CategoryNode
    {
        public CategoryNode(ICategoryInfo info)
        {
            Info = info;
        }
        public ICategoryInfo Info { get; }
        public HashSet<CategoryNode> Children { get; } = new();
    }

    HashSet<CategoryNode> TreeItems;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await Client.CategoryTrees.ExecuteAsync();
            EnsureNoErrors(res);

            TreeItems = new HashSet<CategoryNode>();
            foreach (var cat1 in res.Data.SupCategories)
            {
                if (cat1.ParentId != "4161")
                    continue;

                var item1 = new CategoryNode(cat1);
                TreeItems.Add(item1);
                foreach (var cat2 in cat1.Children)
                {
                    var item2 = new CategoryNode(cat2);
                    item1.Children.Add(item2);
                    foreach (var cat3 in cat2.Children)
                    {
                        var item3 = new CategoryNode(cat3);
                        item2.Children.Add(item3);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
        }
    }
}
