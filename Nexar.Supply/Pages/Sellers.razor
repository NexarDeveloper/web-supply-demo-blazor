@page "/sellers"
@inherits AbstractPage
@inject NexarClient Client
@using Element = Nexar.Client.ISellers_SupSellers

<MudText Typo="Typo.h4" GutterBottom="true">Sellers</MudText>

@if (_sellers is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="@_sellers" Filter="FilterElement">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="_filterString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Homepage</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Homepage"><MudLink Href="@context.HomepageUrl" Target="_blank">@context.HomepageUrl</MudLink></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    string _filterString = string.Empty;
    IReadOnlyList<Element> _sellers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await Client.Sellers.ExecuteAsync();
            res.AssertNoErrors();

            _sellers = res.Data.SupSellers;
        }
        catch (Exception ex)
        {
            await ShowErrorAndResetAsync(ex.Message);
        }
    }

    bool FilterElement(Element element)
    {
        return
            string.IsNullOrWhiteSpace(_filterString) ||
            element.Name.Contains(_filterString, StringComparison.OrdinalIgnoreCase) ||
            element.HomepageUrl.Contains(_filterString, StringComparison.OrdinalIgnoreCase);
    }
}
