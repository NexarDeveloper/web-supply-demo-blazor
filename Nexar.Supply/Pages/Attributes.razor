@page "/attributes"
@inherits AbstractPage
@inject NexarClient Client
@using Element = Nexar.Client.IAttributes_SupAttributes

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4" GutterBottom="true">Attributes</MudText>
            @if (_attributes == null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else
            {
                <MudTable Items="@_attributes" Filter="new Func<Element, bool>(FilterFunc1)">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Shortname</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Group</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Shortname">@context.Shortname</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Group">@context.Group</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    string _searchString = string.Empty;
    IReadOnlyList<Element> _attributes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await Client.Attributes.ExecuteAsync();
            EnsureNoErrors(res);

            _attributes = res.Data.SupAttributes;
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
        }
    }

    bool FilterFunc1(Element element) => FilterFunc(element, _searchString);

    bool FilterFunc(Element element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Shortname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
