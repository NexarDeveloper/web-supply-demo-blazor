@page "/search"
@inherits AbstractPage
@inject NexarClient Client

<MudText Typo="Typo.h4" GutterBottom="true">Search</MudText>

<MudCard>
    <MudCardContent>
        <MudAutocomplete T="string" Label="Query"
                         TextChanged="QueryChanged" SearchFunc="@AutocompleteAsync"
                         ResetValueOnEmptyText="true" Dense="true" CoerceText="false" />
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary" OnClick="@SearchAsync">Search</MudButton>
        @if (_loading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
    </MudCardActions>
</MudCard>

@if (_manufacturers?.Count > 0)
{
    <MudText Typo="Typo.h5" GutterBottom="true">Manufacturers</MudText>

    <MudTable Items="@_manufacturers">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Count</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Count">@context.Count</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@if (_parts?.Count > 0)
{
    <MudText Typo="Typo.h5" GutterBottom="true">Parts</MudText>

    <MudTable Items="@_parts">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Mpn</MudTh>
            <MudTh>Manufacturer</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Mpn">@context.Mpn</MudTd>
            <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    string _query;
    bool _loading;

    record CompanyInfo(string Id, string Name, int? Count);
    IReadOnlyList<CompanyInfo> _manufacturers;

    record PartInfo(string Id, string Mpn, string Manufacturer);
    IReadOnlyList<PartInfo> _parts;

    void QueryChanged(string value)
    {
        _query = value;
    }

    async Task<IEnumerable<string>> AutocompleteAsync(string value)
    {
        if (string.IsNullOrEmpty(value))
            return null;

        var res = await Client.Suggest.ExecuteAsync(value);
        if (res.Errors.Count > 0)
        {
            return null;
        }
        else
        {
            return res.Data.SupSuggest.Select(x => x.Text).ToHashSet();
        }
    }

    async Task SearchAsync()
    {
        if (string.IsNullOrWhiteSpace(_query))
            return;

        _loading = true;
        try
        {
            var res = await Client.Search.ExecuteAsync(_query);
            res.AssertNoErrors();

            _manufacturers = res.Data.SupSearch.ManufacturerAgg
                .Select(x => new CompanyInfo(x.Company.Id, x.Company.Name, x.Count))
                .ToArray();

            _parts = res.Data.SupSearch.Results
                .Select(x => new PartInfo(x.Part.Id, x.Part.Mpn, x.Part.Manufacturer.Name))
                .ToArray();
        }
        catch (Exception ex)
        {
            await ShowErrorAndResetAsync(ex.Message);
        }
        finally
        {
            _loading = false;
        }
    }
}
