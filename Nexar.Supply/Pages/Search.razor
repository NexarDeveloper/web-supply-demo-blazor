@page "/search"
@inherits AbstractPage
@inject NexarClient Client

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4" GutterBottom="true">Search</MudText>
            <MudAutocomplete T="string" Label="Query" SearchFunc="@AutocompleteAsync" ResetValueOnEmptyText="true"
                             TextChanged="OnQueryChanged" Dense="true" CoerceText="false" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" OnClick="@SearchAsync">Search</MudButton>
            @if (_loading)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
        </MudCardActions>
    </MudCard>

    @if (manufacturers != null && manufacturers.Count > 0)
    {
        <MudCard>
            <MudCardContent>
                <MudTable Items="@manufacturers">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Manufacturers</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Count</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Count">@context.Count</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }

    @if (parts != null && parts.Count > 0)
    {
        <MudCard>
            <MudCardContent>
                <MudTable Items="@parts">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Parts</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Mpn</MudTh>
                        <MudTh>Manufacturer</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Mpn">@context.Mpn</MudTd>
                        <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    record CompanyInfo(string Id, string Name, int? Count);
    record PartInfo(string Id, string Mpn, string Manufacturer);

    IReadOnlyList<string> _suggestions = Array.Empty<string>();
    string _query = "";
    bool _loading;

    IReadOnlyList<CompanyInfo> manufacturers;
    IReadOnlyList<PartInfo> parts;

    void OnQueryChanged(string value)
    {
        _query = value;
    }

    async Task<IEnumerable<string>> AutocompleteAsync(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Array.Empty<string>();

        var res = await Client.Suggest.ExecuteAsync(value);
        if (res.Errors.Count > 0)
        {
            return Array.Empty<string>();
        }
        else
        {
            return res.Data.SupSuggest.Select(x => x.Text).Distinct();
        }
    }

    async Task SearchAsync()
    {
        if (string.IsNullOrWhiteSpace(_query))
            return;

        _loading = true;
        try
        {
            var res = await Client.Search.ExecuteAsync(_query);
            EnsureNoErrors(res);

            manufacturers = res.Data.SupSearch.ManufacturerAgg.Select(x => new CompanyInfo(x.Company.Id, x.Company.Name, x.Count)).ToArray();
            parts = res.Data.SupSearch.Results.Select(x => new PartInfo(x.Part.Id, x.Part.Mpn, x.Part.Manufacturer.Name)).ToArray();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorAsync(ex.Message);
        }
        finally
        {
            _loading = false;
        }
    }
}
