schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar Map

scalar Time

type Query {
  node(id: ID!): Node
  "Search for workspaces associated with this account."
  desWorkspaces(where: DesWorkspaceFilterInput): [DesWorkspace!]!
  "Search a specific workspace by its unique identifier."
  desWorkspaceById("The node identifier for a workspace." id: ID!): DesWorkspace
  desSharedWithMe: DesSharedWithMe!
  desTeam(workspaceUrl: String!): DesTeam!
  desUsers(workspaceUrl: String! ids: [String!]!): [DesUser]!
  "Search projects within a workspace with results in paged groups."
  desProjects(first: Int after: String last: Int before: String "The web address of a workspace." workspaceUrl: String! "Optional filter for projects with workflows completed after the specific `DateTime`." completedWorkflowAfter: DateTime where: DesProjectFilterInput): DesProjectConnection
  "Search a specific project by its unique identifier."
  desProjectById("The node identifier for a project." id: ID!): DesProject
  desDesignItemById(id: ID!): DesDesignItem
  desLibrary(workspaceUrl: String!): DesLibrary!
  desComponentById(id: ID!): DesComponent
  "Search for comment threads associated with a project."
  desCommentThreads("The node identifier for a project (This is the project field named \"id\")." projectId: ID!): [DesCommentThread!]!
  "Search for a specific comment thread associated with a project."
  desCommentThread("The node identifier for a project (This is the project field named \"id\")." projectId: ID! "The reference identifier for a comment thread." threadId: String!): DesCommentThread
  desReleaseById(id: ID!): DesRelease
  desPackages: [DesManufacturePackage!]!
  desPackageById(id: ID!): DesManufacturePackage
  desBomById(id: ID!): DesBom
  authorizeByCredentials(username: String! password: String!): DesAuthorizationToken!
  "Get all attributes"
  supAttributes: [SupAttribute!]!
  "Get manufacturer companies"
  supManufacturers("list of company IDs.  Omit to fetch all manufacturers." ids: [String!]): [SupCompany!]!
  "Get seller companies (distributors)"
  supSellers("list of company IDs.  Omit to fetch all sellers." ids: [String!]): [SupCompany!]!
  "Get categories"
  supCategories("list of category IDs. Omit to fetch all categories." ids: [String!] "list of \/electronic-parts SEO page paths for categories." paths: [String!]): [SupCategory!]!
  "Get parts by ID."
  supParts("list of part IDs. APIv3 UIDs are also supported." ids: [String!]! "user's country" country: String! = "US" "user's currency" currency: String! = "USD" "fetch latest pricing and stock data from distributor API. Company.isDistributorApi indicates if a distributor supports this feature." distributorApi: Boolean "how long to wait for distributor API to respond as a duration string (e.g. `3s` or `500ms`)" distributorApiTimeout: String! = "3s" "if needed, pass along credentials for API integrations" customPricingCredentials: [SupApiCredentials!]): [SupPart]!
  "Attempt to complete a partial query string.  Used for autosuggest \/ typeahead text inputs."
  supSuggest("partial query string" q: String! "categoryId to scope suggestions to" categoryId: String "only return part number suggestions" partNumbersOnly: Boolean): [SupSuggestion!]!
  "Search parts, including filters, pagination, aggregation, sorting"
  supSearch("the query to search" q: String "user's country" country: String! = "US" "user's currency" currency: String! = "USD" "offset in the result set" start: Int "page size of results" limit: Int "field to sort by.  See [sort values](\/api\/v4\/values#sort)" sort: String "direction of sort: `asc` or `desc`" sortDir: SupSortDirection "filter to remove parts with no stocking distributors" inStockOnly: Boolean "a key: value map of filters. See [filter values](\/api\/v4\/values#filters)" filters: Map "fetch latest pricing and stock data from distributor API. Company.isDistributorApi indicates if a distributor supports this feature." distributorApi: Boolean "how long to wait for distributor API to respond as a duration string (e.g. `3s` or `500ms`)" distributorApiTimeout: String! = "3s" "if needed, pass along credentials for API integrations" customPricingCredentials: [SupApiCredentials!]): SupPartResultSet!
  "Search parts by mpn only, including filters, pagination, aggregation, sorting"
  supSearchMpn("the query to search on mpn" q: String "user's country" country: String! = "US" "user's currency" currency: String! = "USD" "offset in the result set" start: Int "page size of results" limit: Int "field to sort by.  See [sort values](\/api\/v4\/values#sort)" sort: String "direction of sort: `asc` or `desc`" sortDir: SupSortDirection "filter to remove parts with no stocking distributors" inStockOnly: Boolean "a key: value map of filters. See [filter values](\/api\/v4\/values#filters)" filters: Map "fetch latest pricing and stock data from distributor API. Company.isDistributorApi indicates if a distributor supports this feature." distributorApi: Boolean "how long to wait for distributor API to respond as a duration string (e.g. `3s` or `500ms`)" distributorApiTimeout: String! = "3s" "if needed, pass along credentials for API integrations" customPricingCredentials: [SupApiCredentials!]): SupPartResultSet!
  "Suggest an alternate `q` when no results are found"
  supSpellingCorrection("query string to correct" q: String!): [SupSpellingCorrection!]!
  "Match multiple manufacturer + mpn pairs at once.  Useful for when you have a list of parts, as with a BOM (Bill of Materials)"
  supMultiMatch("list of inputs to attempt to match" queries: [SupPartMatchQuery!]! "options when matching such as applying filters or only including authorized or in-stock parts" options: SupPartMatchOptions "user's country" country: String! = "US" "user's currency" currency: String! = "USD" "fetch latest pricing and stock data from distributor API. Company.isDistributorApi indicates if a distributor supports this feature." distributorApi: Boolean "how long to wait for distributor API to respond as a duration string (e.g. `3s` or `500ms`)" distributorApiTimeout: String! = "3s" "if needed, pass along credentials for API integrations" customPricingCredentials: [SupApiCredentials!]): [SupPartMatch!]!
}

type Mutation {
  desCreateComment(input: DesCreateCommentInput!): DesCreateCommentPayload!
  desDeleteComment(input: DesDeleteCommentInput!): DesDeleteCommentPayload!
  desUpdateComment(input: DesUpdateCommentInput!): DesUpdateCommentPayload!
  desCreateCommentThread(input: DesCreateCommentThreadInput!): DesCreateCommentThreadPayload!
  desDeleteCommentThread(input: DesDeleteCommentThreadInput!): DesDeleteCommentThreadPayload!
  "Creates a user."
  desCreateUser(input: DesCreateUserInput!): DesCreateUserPayload!
  "Deletes the specified user."
  desDeleteUser(input: DesDeleteUserInput!): DesDeleteUserPayload!
  "Updates the specified user properties."
  desUpdateUser(input: DesUpdateUserInput!): DesUpdateUserPayload!
  "Creates a new user group."
  desCreateUserGroup(input: DesCreateUserGroupInput!): DesCreateUserGroupPayload!
  "Deletes the specified user group."
  desDeleteUserGroup(input: DesDeleteUserGroupInput!): DesDeleteUserGroupPayload!
  "Updates the specified user group."
  desUpdateUserGroup(input: DesUpdateUserGroupInput!): DesUpdateUserGroupPayload!
  "Adds users to the specified group."
  desAddUsersToGroup(input: DesAddUsersToGroupInput!): DesAddUsersToGroupPayload!
  "Removes users from the specified group."
  desRemoveUsersFromGroup(input: DesRemoveUsersFromGroupInput!): DesRemoveUsersFromGroupPayload!
  desLaunchWorkflow(input: DesLaunchWorkflowInput!): DesLaunchWorkflowPayload!
  desTerminateWorkflows(input: DesTerminateWorkflowsInput!): DesTerminateWorkflowsPayload!
}

type Subscription {
  desOnCommentUpdated(input: DesOnCommentUpdatedInput!): DesCommentNotification!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type DesAuthorizationToken {
  token: String!
}

type DesAddUsersToGroupPayload {
  errors: [DesPayloadError!]!
}

type DesArea {
  x: Float!
  xMm2: Decimal!
  xMils2: Decimal!
}

type DesAssemblyDrawings {
  assemblyDrawingFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

"A Bill of Materials (BOM) contains a list of all of the parts needed for the assembly of a PCB."
type DesBom {
  "The list of each unique part within the BOM."
  bomItems: [DesBomItem!]!
}

"A Bill of Materials (BOM) item contains usage information for a unique component on the PCB."
type DesBomItem {
  "The detailed component infomation for this BOM item."
  component: DesComponent
  "The total number of times this item is used."
  quantity: Decimal!
  "The list of each instance of this BOM item."
  bomItemInstances: [DesBomItemInstance!]!
}

"A Bill of Materials (BOM) item instance contains infomation for one specific use case of the item."
type DesBomItemInstance {
  "The unique label for this item."
  designator: String!
  "The variant use status for this item."
  isFitted: Boolean!
}

"A comment is one of a collection of remarks associated with a comment thread."
type DesComment {
  "The account information for who created this comment."
  createdBy: DesUser!
  "The account information for those who are referenced for this comment."
  mentions: [DesMention!]!
  "The reference identifier for this comment (use with desDeleteComment)."
  commentId: String!
  "The content body of this comment."
  text: String!
}

"A comment context provides additional information about associations for a comment thread."
type DesCommentContext {
  "The reference identifier for the document associated with a comment thread."
  documentId: String
  "The reference identifier for an object associated with a comment thread."
  objectId: String
  "The area associated with a comment thread."
  area: DesRectangle!
  "The release identifier associated with a comment thread."
  releaseId: String
}

type DesCommentNotification {
  action: String!
  data: DesCommentNotificationData!
}

type DesCommentNotificationData {
  projectId: String!
  documentId: String
  documentName: String
  commentThreadId: String!
  threadDate: String!
  threadData: String
  threadStatus: String
  commentId: String!
  commentAuthor: String
  commentDate: String!
  commentText: String
}

"A comment thread contains an initial remark associated with the design and a collection of replies."
type DesCommentThread {
  "The account information for the owner of any action or response to this comment thread."
  assignedTo: DesUser
  "The account information for who created this comment thread."
  createdBy: DesUser!
  "The account information for who most recently modified this comment thread."
  modifiedBy: DesUser!
  "The list of replies associated with this comment thread."
  comments: [DesComment!]!
  "The reference identifier for this comment thread (used by `desCreateComment` and `desDeleteComment`)."
  commentThreadId: String!
  status: Int!
  "The `DateTime` for the creation of this comment thread."
  createdAt: DateTime!
  "The `DateTime` for the most recent modification of this comment thread."
  modifiedAt: DateTime!
  "The web address to download the screenshot associated with the creation of this comment thread."
  originalStateScreenshotUrl: String
  "The sequence number of this comment thread."
  threadNumber: Int!
  "The information about properties related to this comment thread."
  context: DesCommentContext!
}

"A component contains the parametric details of a part attached the PCB."
type DesComponent implements Node {
  "The node identifier for this component (used by `desComponentById`)."
  id: ID!
  "The component folder."
  folder: DesFolder
  "The list of the part choices associated with this component."
  manufacturerParts: [DesManufacturerPart!]!
  "More component data, relatively expensive, recommended for individual components with `desComponentById`."
  details: DesComponentDetails!
  "The library label for this component."
  name: String!
  "The additional information for this component."
  comment: String!
  "The summary of function or other performance details for this component."
  description: String!
  "The component revision."
  revision: String!
  model3D: DesModel3D
}

"A connection to a list of items."
type DesComponentConnection {
  "Information to aid in pagination."
  pageInfo: DesPageInfo!
  "A list of edges."
  edges: [DesComponentEdge!]
  "A flattened list of the nodes."
  nodes: [DesComponent!]
  totalCount: Int!
}

type DesComponentDetails {
  "The list of the parameters describing this component."
  parameters: [DesComponentParameter!]!
  "The list of the symbols used for this component."
  symbols: [DesSymbol!]!
  "The list of the footprints used this component."
  footprints: [DesFootprint!]!
}

"An edge in a connection."
type DesComponentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesComponent!
}

type DesComponentParameter {
  type: DesParameterType!
  name: String!
  value: String!
}

type DesCreateCommentPayload {
  commentId: String!
  errors: [DesPayloadError!]!
}

type DesCreateCommentThreadPayload {
  commentThreadId: String!
  commentId: String!
  errors: [DesPayloadError!]!
}

type DesCreateUserGroupPayload {
  id: ID!
}

type DesCreateUserPayload {
  userId: String!
}

type DesDeleteCommentPayload {
  errors: [DesPayloadError!]!
}

type DesDeleteCommentThreadPayload {
  errors: [DesPayloadError!]!
}

type DesDeleteUserGroupPayload {
  errors: [DesPayloadError!]!
}

type DesDeleteUserPayload {
  errors: [DesPayloadError!]!
}

"A design manages all of the schematic, PCB, and BOM content for a project."
type DesDesign {
  "The list of published versions of the design grouped into pages."
  releases(first: Int after: String last: Int before: String where: DesReleaseFilterInput): DesReleaseConnection
  "The most recent version of the design."
  workInProgress: DesWorkInProgress!
}

type DesDesignExchange {
  models3D: [DesModel3D!]!
  downloadableFile: DesDownloadableFile!
}

"A design item is a specific instance of a part used in the design."
type DesDesignItem implements Node {
  "The node identifier for this project (used by `DesDesignItemById`)."
  id: ID!
  "The detailed component infomation for this design item."
  component: DesComponent
  "The list of all comment threads related to this design item."
  commentThreads: [DesCommentThread!]
  "The unique label for this design item."
  designator: String!
  "The summary of function or other performance details for this design item."
  description: String!
  "The additional information for this design item."
  comment: String!
  "The layer(side) placement for this design item."
  layer: DesLayer
  "The planar location for this design item."
  position: DesPosition2D!
  "The planar boundary for this design item."
  area: DesRectangle
  footprintName: String!
  "The list of connection targets for this design item."
  pads: [DesPad!]!
  "The list of multiple layer connections for this design item."
  vias: [DesVia!]!
  "The list of conductor segments for this design item."
  tracks: [DesTrack!]!
}

"A connection to a list of items."
type DesDesignItemConnection {
  "Information to aid in pagination."
  pageInfo: DesPageInfo!
  "A list of edges."
  edges: [DesDesignItemEdge!]
  "A flattened list of the nodes."
  nodes: [DesDesignItem!]
  totalCount: Int!
}

"An edge in a connection."
type DesDesignItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesDesignItem!
}

type DesDownloadableFile {
  fileName: String!
  relativePath: String!
  downloadUrl: String!
}

type DesFolder {
  name: String!
  description: String!
}

type DesFootprint {
  imageFullSizeUrl: String!
  imageThumbnailUrl: String!
  dataDownloadUrl: String!
  pins: [DesPin!]!
  folder: DesFolder
  guid: String!
  name: String!
  comment: String!
  description: String!
}

type DesGerber {
  gerberFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesGerberX2 {
  gerberX2Files: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesIpc2581 {
  ipc2581Files: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesLaunchWorkflowPayload {
  id: String!
  status: Int!
}

type DesLayer {
  name: String!
  thickness: DesSize
  dielectricConstant: Decimal
  copperWeight: DesWeight
  material: String
  nets: [DesNet!]!
  layerType: DesLayerType!
  layerProperties: [DesLayerProperty!]!
}

type DesLayerProperty {
  name: String!
  text: String!
  size: DesSize
}

type DesLibrary {
  components(first: Int after: String last: Int before: String): DesComponentConnection
}

type DesManufacturePackage {
  variants: [DesReleaseVariant!]!
  name: String!
}

type DesManufacturerPart {
  supplierParts: [DesSupplierPart!]!
  "The manufacturer company name."
  companyName: String!
  "The part number (MPN)."
  partNumber: String!
  priority: Int!
}

type DesMention {
  user: DesUser!
  type: Int!
}

type DesModel3D {
  parasolidFile: DesDownloadableFile!
}

type DesNcDrill {
  ncDrillFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesNet {
  name: String!
  cumulativeLength: DesSize!
  layers: [DesLayer!]!
  pads: [DesPad!]!
  vias: [DesVia!]!
  tracks: [DesTrack!]!
}

type DesOdb {
  odbFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesPad {
  padType: DesPadType!
  layer: DesLayer
  net: DesNet
  designator: String
  globalDesignator: String
  radius: Int
  isPlated: Boolean
  holeSize: DesSize!
  size: DesSize2D!
  shape: DesPrimitiveShape
  position: DesPosition2D!
}

type DesPayloadError {
  message: String!
}

"A PCB contains design details of the physical product."
type DesPcb {
  "The details of the layer structure of this PCB."
  layerStack: DesStackup
  "The list of all part instances used in this PCB grouped into pages."
  designItems(first: Int after: String last: Int before: String "An optional array of designators to search." designators: [String!]): DesDesignItemConnection
  "The list of all electrically connected regions in this PCB."
  nets("An optional array of names to search." names: [String!]): [DesNet!]!
  "The list of all part connection targets in this PCB."
  pads: [DesPad!]!
  "The list of all conductor segments in this PCB."
  tracks: [DesTrack!]!
  "The list of all multiple layer connections in this PCB."
  vias: [DesVia!]!
  "The list of all comment threads related to this PCB."
  commentThreads: [DesCommentThread!]!
  "The reference identifier for this PCB."
  documentId: String!
  "The dimensions of the PCB outline."
  size: DesSize2D!
  "The total area contained by the PCB outline."
  area: DesArea!
  "The location of the coordinate system origin relative to ???."
  origin: DesPosition2D!
}

type DesPcbAssembly {
  packageName: String!
  pickAndPlace: DesPickAndPlace!
  assemblyDrawings: DesAssemblyDrawings!
  downloadUrl: String!
}

type DesPcbFabrication {
  packageName: String!
  odb: DesOdb!
  ipc2581: DesIpc2581!
  gerber: DesGerber!
  gerberX2: DesGerberX2!
  ncDrill: DesNcDrill!
  testPoints: DesTestPoints!
  downloadUrl: String!
}

type DesPickAndPlace {
  pickAndPlaceFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesPin {
  name: String!
}

type DesPosition2D {
  xMm: Decimal!
  yMm: Decimal!
  xMils: Decimal!
  yMils: Decimal!
  x: Int!
  y: Int!
}

"A project manages all development stages of the PCB\/PCA product lifecycle."
type DesProject implements Node {
  "The node identifier for this project (used by `desProjectById`)."
  id: ID!
  "The account information for who created this project."
  createdBy: DesUser
  "The account information for who last modified this project."
  updatedBy: DesUser
  "The list of the parameters describing this project."
  parameters("An optional list of parameter names to search." names: [String!]): [DesProjectParameter!]!
  "The web address to download a preview image for this project."
  previewUrl: String!
  "The list of workflows associated with this project."
  workflows("An option to search workflows that have been completed." isClosed: Boolean! = false "An option to search workflows that have been modified after a specific `DateTime`." modifiedAfter: DateTime where: DesWorkflowFilterInput): [DesWorkflow!]
  "The `DateTime` of the most recent workflow completion associated with this project."
  completedWorkflowAt: DateTime
  "The Altium 365 web address."
  url: Url!
  "The reference identifier for this project."
  projectId: String!
  "The assigned name for this project."
  name: String
  "The summary of this project content or purpose."
  description: String
  "The `DateTime` when this project was created."
  createdAt: DateTime
  "The `DateTime` when this project was last modified."
  updatedAt: DateTime
  "The detailed design information for this project."
  design: DesDesign!
}

"A connection to a list of items."
type DesProjectConnection {
  "Information to aid in pagination."
  pageInfo: DesPageInfo!
  "A list of edges."
  edges: [DesProjectEdge!]
  "A flattened list of the nodes."
  nodes: [DesProject!]
  totalCount: Int!
}

"An edge in a connection."
type DesProjectEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesProject!
}

type DesProjectParameter {
  name: String!
  value: String!
}

type DesRectangle {
  pos1: DesPosition2D!
  pos2: DesPosition2D!
}

"A release is a published version of a design with additional generated files for manufacturing."
type DesRelease implements Node {
  "The node identifier for this release (used by `desReleaseById`)."
  id: ID!
  "The list of variations contained in this release."
  variants(where: DesReleaseVariantFilterInput): [DesReleaseVariant!]!
  manufacturePackages: [DesManufacturePackage!]!
  "The `DateTime` when this release was created."
  createdAt: DateTime!
  "The summary of this release content or purpose."
  description: String!
  "The reference identifier for this release."
  releaseId: String!
}

"A connection to a list of items."
type DesReleaseConnection {
  "Information to aid in pagination."
  pageInfo: DesPageInfo!
  "A list of edges."
  edges: [DesReleaseEdge!]
  "A flattened list of the nodes."
  nodes: [DesRelease!]
  totalCount: Int!
}

"An edge in a connection."
type DesReleaseEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesRelease!
}

"A variant contains a specific configuration of a base design."
type DesReleaseVariant {
  "The data needed for assembly of this published design variant."
  pcbAssembly: DesPcbAssembly
  "The data needed for fabrication of this published design variant."
  pcbFabrication: DesPcbFabrication
  "The Bill of Materials (BOM) for this published design variant."
  bom: DesBom
  "The PCB document for this design variant."
  pcb: DesPcb
  "The descriptive label for this design variant."
  name: String!
  "The list of schematic documents for this design variant."
  schematics: [DesSchematic!]!
}

type DesRemoveUsersFromGroupPayload {
  errors: [DesPayloadError!]!
}

"A schematic contains the design parts and logical connections."
type DesSchematic {
  "The list of all part instances used in this schematic grouped into pages."
  designItems(first: Int after: String last: Int before: String): DesDesignItemConnection
  "The list of all logical part connections in this schematic."
  nets("An optional array of names to search." names: [String!]): [DesNet!]!
  "The list of all comment threads related to this schematic."
  commentThreads: [DesCommentThread!]!
  "The reference identifier for this schematic."
  documentId: String!
  parentIds: [String!]!
  units: Int!
}

type DesSharedWithMe {
  projects: [DesProject!]!
  commentThreads: [DesCommentThread!]!
  manufacturePackages: [DesManufacturePackage!]!
  name: String!
}

type DesSize {
  x: Decimal!
  xMm: Decimal!
  xMils: Decimal!
}

type DesSize2D {
  x: Int!
  y: Int!
  xMm: Decimal!
  xMils: Decimal!
  yMm: Decimal!
  yMils: Decimal!
}

type DesStack {
  name: String!
  layers: [DesLayer!]!
}

type DesStackup {
  stackupType: String!
  layerTypes: [DesLayerType!]!
  roughnessType: String!
  roughnessFactorSR: String!
  roughnessFactorRF: String!
  stacks: [DesStack!]!
}

type DesSupplierPart {
  "The supplier company name."
  companyName: String!
  "The part number (SKU)."
  partNumber: String!
  "Available for library components."
  prices: [DesSupplierPrice!]
  "Available for library components."
  stocks: [DesSupplierStock!]
}

type DesSupplierPrice {
  currency: String!
  price: Decimal!
  breakQuantity: Int!
}

type DesSupplierStock {
  locationName: String!
  quantity: Decimal!
}

type DesSymbol {
  imageFullSizeUrl: String!
  imageThumbnailUrl: String!
  dataDownloadUrl: String!
  pins: [DesPin!]!
  folder: DesFolder
  guid: String!
  name: String!
  comment: String!
  description: String!
}

type DesTeam {
  users: [DesUser!]!
  groups: [DesUserGroup!]!
}

type DesTerminateWorkflowsError {
  id: String!
  message: String!
}

type DesTerminateWorkflowsPayload {
  errors: [DesTerminateWorkflowsError!]!
}

type DesTestPoints {
  testPointFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesTrack {
  layer: DesLayer
  net: DesNet
  width: DesSize!
  begin: DesPosition2D!
  end: DesPosition2D!
}

type DesUpdateCommentPayload {
  errors: [DesPayloadError!]!
}

type DesUpdateUserGroupPayload {
  errors: [DesPayloadError!]!
}

type DesUpdateUserPayload {
  errors: [DesPayloadError!]!
}

"A user information contains the identifier and nullable extra fields."
type DesUser {
  "Null if the user no longer exists."
  groups: [DesUserGroup!]
  "The internal user ID."
  userId: String!
  "Null if the user no longer exists."
  userName: String
  "Null if the user no longer exists."
  email: String
  "Null if the user no longer exists."
  firstName: String
  "Null if the user no longer exists."
  lastName: String
}

"A user group information."
type DesUserGroup implements Node {
  "The node ID."
  id: ID!
  "The group name."
  name: String!
}

type DesVia {
  layer: DesLayer
  net: DesNet
  beginLayer: DesLayer
  endLayer: DesLayer
  name: String
  holeDiameter: DesSize!
  padDiameter: DesSize!
  shape: DesPrimitiveShape
  position: DesPosition2D!
}

type DesWeight {
  x: Decimal!
  gram: Decimal!
  ounce: Decimal!
}

"A variant contains a specific configuration of a base design."
type DesWipVariant {
  designExchange: DesDesignExchange
  "The Bill of Materials (BOM) for this design variant."
  bom: DesBom
  "The PCB document for this design variant."
  pcb: DesPcb
  "The descriptive label for this design variant."
  name: String!
  "The list of schematic documents for this design variant."
  schematics: [DesSchematic!]!
}

"The most recent version of a design."
type DesWorkInProgress {
  "The list of variations contained in this design."
  variants(where: DesWipVariantFilterInput): [DesWipVariant!]!
}

"A workflow manages the execution of a logical sequence of tasks."
type DesWorkflow {
  "The list of variables defined for this workflow."
  variables("An optional list of parameter names to search." names: [String!]): [DesWorkflowVariable!]!
  "The `DateTime` for the most recent changes for this workflow."
  modifiedAt: DateTime!
  "The reference identifier for this workflow."
  workflowId: String!
  "The name of the active task(s) for this workflow."
  state: String
  "The account information for the owner of any action or response needed for this workflow."
  assignee: String!
  "The account information for who created this workflow."
  createdBy: String!
  "The `DateTime` for the creation of this workflow."
  createdAt: DateTime!
  "The `DateTime` for the completion of this workflow."
  endedAt: DateTime
  "The label for this workflow."
  name: String!
  "The reference identifier for definition of this workflow."
  processDefinitionId: String!
  "The label for the definition of this workflow."
  processDefinitionName: String!
  "The current condition of this workflow."
  status: String!
}

"A workflow definition contains a logical sequence of tasks."
type DesWorkflowDefinition {
  "The list of variables need to launch this workflow definition."
  variables: [DesWorkflowVariable!]!
  "The reference identifier for this workflow definition."
  workflowDefinitionId: String!
  "The label for this workflow definition."
  name: String!
  "The account information for who created this workflow definition."
  createdBy: String!
  "The `DateTime` for the creation of this workflow definition."
  createdAt: DateTime!
}

type DesWorkflowVariable {
  valueType: String
  constraint: String
  name: String!
  value: String!
}

"A workspace provides a flexible and secure method for managing design, manufacturing and supply content."
type DesWorkspace implements Node {
  "The node identifier for the workspace (used by `DesWorkspaceById`)."
  id: ID!
  "The resource managing components for this workspace."
  library: DesLibrary!
  "The list of members authorized for this workspace."
  team: DesTeam!
  "The list of projects managed in this workspace."
  projects("An option to search projects with workflows that have been completed after a specific `DateTime`." completedWorkflowAfter: DateTime where: DesProjectFilterInput): [DesProject!]!
  "The list of workflow definitions in this workspace."
  workflowDefinitions(where: DesWorkflowDefinitionFilterInput): [DesWorkflowDefinition!]
  "The list of workflows in this workspace."
  workflows(where: DesWorkflowFilterInput): [DesWorkflow!]
  "The descriptive label for this workspace."
  name: String!
  "The web address of this workspace."
  url: String!
  "The summary of this workspace content or purpose."
  description: String
  "Tells if the workspace is the current user default."
  isDefault: Boolean!
}

"Information about pagination in a connection."
type DesPageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

input DesBooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input DesComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DesComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input DesComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DesAddUsersToGroupInput {
  "The group node ID."
  id: ID!
  "User IDs."
  userIds: [String!]!
}

input DesCreateCommentInput {
  entityId: ID!
  commentThreadId: String!
  text: String!
}

input DesCreateCommentThreadInput {
  entityId: ID!
  documentId: String!
  text: String!
  objectId: String
  area: DesRectangleInput
  releaseId: String
}

input DesCreateUserGroupInput {
  workspaceUrl: String!
  name: String!
}

input DesCreateUserInput {
  workspaceUrl: String!
  userName: String!
  password: String!
  firstName: String!
  lastName: String!
  email: String!
}

input DesDeleteCommentInput {
  entityId: ID!
  commentThreadId: String!
  commentId: String!
}

input DesDeleteCommentThreadInput {
  entityId: ID!
  commentThreadId: String!
}

input DesDeleteUserGroupInput {
  "The group node ID."
  id: ID!
}

input DesDeleteUserInput {
  workspaceUrl: String!
  userId: String!
}

input DesLaunchWorkflowInput {
  workspaceUrl: String!
  workflowDefinitionId: String!
  name: String
  "The string variables."
  variables: [DesWorkflowVariableInput!]!
  "The attachment variables."
  attachments: [DesWorkflowAttachmentVariableInput!]
}

input DesOnCommentUpdatedInput {
  workspaceUrl: String!
  token: String!
}

input DesPosition2DInput {
  x: Int!
  y: Int!
}

"A project manages all development stages of the PCB\/PCA product lifecycle."
input DesProjectFilterInput {
  and: [DesProjectFilterInput!]
  or: [DesProjectFilterInput!]
  "The Altium 365 web address."
  url: DesUriFilterInput
  "The reference identifier for this project."
  projectId: DesStringOperationFilterInput
  "The assigned name for this project."
  name: DesStringOperationFilterInput
  "The summary of this project content or purpose."
  description: DesStringOperationFilterInput
  "The `DateTime` when this project was created."
  createdAt: DesComparableNullableOfDateTimeOperationFilterInput
  "The `DateTime` when this project was last modified."
  updatedAt: DesComparableNullableOfDateTimeOperationFilterInput
}

input DesRectangleInput {
  pos1: DesPosition2DInput!
  pos2: DesPosition2DInput!
}

"A release is a published version of a design with additional generated files for manufacturing."
input DesReleaseFilterInput {
  and: [DesReleaseFilterInput!]
  or: [DesReleaseFilterInput!]
  "The node identifier for this release (used by `desReleaseById`)."
  id: DesStringOperationFilterInput
  "The `DateTime` when this release was created."
  createdAt: DesComparableDateTimeOperationFilterInput
  "The summary of this release content or purpose."
  description: DesStringOperationFilterInput
  "The reference identifier for this release."
  releaseId: DesStringOperationFilterInput
}

"A variant contains a specific configuration of a base design."
input DesReleaseVariantFilterInput {
  and: [DesReleaseVariantFilterInput!]
  or: [DesReleaseVariantFilterInput!]
  "The descriptive label for this design variant."
  name: DesStringOperationFilterInput
  "The list of schematic documents for this design variant."
  schematics: DesListFilterInputTypeOfDesSchematicFilterInput
}

input DesRemoveUsersFromGroupInput {
  "The group node ID."
  id: ID!
  "User IDs."
  userIds: [String!]!
}

"A schematic contains the design parts and logical connections."
input DesSchematicFilterInput {
  and: [DesSchematicFilterInput!]
  or: [DesSchematicFilterInput!]
  "The reference identifier for this schematic."
  documentId: DesStringOperationFilterInput
  parentIds: DesListStringOperationFilterInput
  units: DesComparableInt32OperationFilterInput
}

input DesTerminateWorkflowsInput {
  workspaceUrl: String!
  workflowIds: [String!]!
}

input DesUpdateCommentInput {
  entityId: ID!
  commentThreadId: String!
  commentId: String!
  text: String!
}

input DesUpdateUserGroupInput {
  "The group node ID."
  id: ID!
  "The group name."
  name: String!
}

input DesUpdateUserInput {
  workspaceUrl: String!
  userId: String!
  firstName: String
  lastName: String
}

"A variant contains a specific configuration of a base design."
input DesWipVariantFilterInput {
  and: [DesWipVariantFilterInput!]
  or: [DesWipVariantFilterInput!]
  "The descriptive label for this design variant."
  name: DesStringOperationFilterInput
  "The list of schematic documents for this design variant."
  schematics: DesListFilterInputTypeOfDesSchematicFilterInput
}

input DesWorkflowAttachmentVariableInput {
  "The variable name."
  name: String!
  "Uploaded file references."
  files: [String!]!
}

"A workflow definition contains a logical sequence of tasks."
input DesWorkflowDefinitionFilterInput {
  and: [DesWorkflowDefinitionFilterInput!]
  or: [DesWorkflowDefinitionFilterInput!]
  "The reference identifier for this workflow definition."
  workflowDefinitionId: DesStringOperationFilterInput
  "The label for this workflow definition."
  name: DesStringOperationFilterInput
  "The account information for who created this workflow definition."
  createdBy: DesStringOperationFilterInput
  "The `DateTime` for the creation of this workflow definition."
  createdAt: DesComparableDateTimeOperationFilterInput
}

"A workflow manages the execution of a logical sequence of tasks."
input DesWorkflowFilterInput {
  and: [DesWorkflowFilterInput!]
  or: [DesWorkflowFilterInput!]
  "The reference identifier for this workflow."
  workflowId: DesStringOperationFilterInput
  "The name of the active task(s) for this workflow."
  state: DesStringOperationFilterInput
  "The account information for the owner of any action or response needed for this workflow."
  assignee: DesStringOperationFilterInput
  "The account information for who created this workflow."
  createdBy: DesStringOperationFilterInput
  "The `DateTime` for the creation of this workflow."
  createdAt: DesComparableDateTimeOperationFilterInput
  "The `DateTime` for the completion of this workflow."
  endedAt: DesComparableNullableOfDateTimeOperationFilterInput
  "The label for this workflow."
  name: DesStringOperationFilterInput
  "The reference identifier for definition of this workflow."
  processDefinitionId: DesStringOperationFilterInput
  "The label for the definition of this workflow."
  processDefinitionName: DesStringOperationFilterInput
  "The current condition of this workflow."
  status: DesStringOperationFilterInput
}

input DesWorkflowVariableInput {
  valueType: String
  constraint: String
  name: String!
  value: String!
}

"A workspace provides a flexible and secure method for managing design, manufacturing and supply content."
input DesWorkspaceFilterInput {
  and: [DesWorkspaceFilterInput!]
  or: [DesWorkspaceFilterInput!]
  "The node identifier for the workspace (used by `DesWorkspaceById`)."
  id: DesStringOperationFilterInput
  "The descriptive label for this workspace."
  name: DesStringOperationFilterInput
  "The web address of this workspace."
  url: DesStringOperationFilterInput
  "The summary of this workspace content or purpose."
  description: DesStringOperationFilterInput
  "Tells if the workspace is the current user default."
  isDefault: DesBooleanOperationFilterInput
}

input DesListFilterInputTypeOfDesSchematicFilterInput {
  all: DesSchematicFilterInput
  none: DesSchematicFilterInput
  some: DesSchematicFilterInput
  any: Boolean
}

input DesListStringOperationFilterInput {
  all: DesStringOperationFilterInput
  none: DesStringOperationFilterInput
  some: DesStringOperationFilterInput
  any: Boolean
}

input DesStringOperationFilterInput {
  and: [DesStringOperationFilterInput!]
  or: [DesStringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DesUriFilterInput {
  and: [DesUriFilterInput!]
  or: [DesUriFilterInput!]
  absolutePath: DesStringOperationFilterInput
  absoluteUri: DesStringOperationFilterInput
  localPath: DesStringOperationFilterInput
  authority: DesStringOperationFilterInput
  hostNameType: DesUriHostNameTypeOperationFilterInput
  isDefaultPort: DesBooleanOperationFilterInput
  isFile: DesBooleanOperationFilterInput
  isLoopback: DesBooleanOperationFilterInput
  pathAndQuery: DesStringOperationFilterInput
  segments: DesListStringOperationFilterInput
  isUnc: DesBooleanOperationFilterInput
  host: DesStringOperationFilterInput
  port: DesComparableInt32OperationFilterInput
  query: DesStringOperationFilterInput
  fragment: DesStringOperationFilterInput
  scheme: DesStringOperationFilterInput
  originalString: DesStringOperationFilterInput
  dnsSafeHost: DesStringOperationFilterInput
  idnHost: DesStringOperationFilterInput
  isAbsoluteUri: DesBooleanOperationFilterInput
  userEscaped: DesBooleanOperationFilterInput
  userInfo: DesStringOperationFilterInput
}

input DesUriHostNameTypeOperationFilterInput {
  eq: DesUriHostNameType
  neq: DesUriHostNameType
  in: [DesUriHostNameType!]
  nin: [DesUriHostNameType!]
}

enum DesLayerType {
  ABSTRACT
  UNKNOWN
  PHYSICAL
  DIELECTRIC
  OVERLAY
  SOLDER_MASK
  BIKINI_COVERLAY
  PASTE_MASK
  MECHANICAL
  FOIL
  PLANE
  SIGNAL
  SURFACE_FINISH
  CORE
  PREPREG
  PLATING
  ADHESIVE
  STIFFENER
  MISC
  PE_LAYER
  CONDUCTIVE
  NON_CONDUCTIVE
}

enum DesPadType {
  SMD
  FREE
}

enum DesParameterType {
  NONE
  TEXT
  VOLTAGE
  CURRENT
  RESISTANCE
  CONDUCTANCE
  CAPACITANCE
  CHARGE
  INDUCTANCE
  POWER
  IMPEDANCE
  FREQUENCY
  TEMPERATURE
  DECIBELS
  PERCENT
  LENGTH
  MASS
  TIME
}

enum DesPrimitiveShape {
  ROUND
  RECTANGLE
  ROUNDED_RECTANGLE
}

enum DesUriHostNameType {
  UNKNOWN
  BASIC
  DNS
  I_PV4
  I_PV6
}

"Used to show the filters that are applied to current search."
type SupAppliedFilter {
  "shortname is the key in the filters Map.  Usually an attribute shortname, or `manufacturerId`, `distributorId`, etc."
  shortname: String!
  "human readable name to display in the UI"
  name: String!
  "values in the filter Map."
  values: [String!]!
  "human readable values to display in the UI"
  displayValues: [String!]!
}

"Defines an attribute like Capacitance or Resistance."
type SupAttribute {
  "Internal Octopart ID"
  id: ID!
  "display name"
  name: String!
  "use as key for `sort` or `filter` in part search"
  shortname: String!
  "use to group together similar attributes, e.g. Technical, Physical, Compliance"
  group: String!
}

"Groups similar attributes together, as can be seen with column groups in specs view"
type SupAttributeGroup {
  "Name of group, e.g. Technical, Physical, Compliance"
  name: String!
  "Attributes in group"
  attributes: [SupAttribute!]!
}

"Information for use on \/electronic-parts Category pages."
type SupBlurb {
  "Category name."
  name: String!
  "Path to \/electronic-parts Category page."
  pathName: String!
  "Short description of Category."
  description: String!
  "Longer description of Category."
  content: String!
}

"cadAgg produces a CadBucket with the count of parts that have CAD Symbol + Footprint and 3D model"
type SupCadBucket {
  cadState: String!
  count: Int
}

"A Category exists in a Category tree.  Examples include Passive Components or Capacitors.  The `path` field is helpful to see where a category is in the tree.\nCategory id `4161` is the root of tree."
type SupCategory {
  "Octopart internal id.  Root id is 4161"
  id: ID!
  "ID of parent category."
  parentId: ID!
  "Display name"
  name: String!
  "List of all ancestor in category tree."
  ancestors: [SupCategory!]!
  "List of direct children in category tree."
  children: [SupCategory!]!
  "Slash separated path.  Can be used to visit URL for category page.  (e.g. `\/electronic-parts\/circuit-protection\/esd-and-circuit-protection-ics`)"
  path: String!
  "List of Attributes deemed to be relevant to this category.  (e.g. Resistance for Resistor category).  Useful for showing contextual filters in UI."
  relevantAttributes: [SupAttribute!]!
  "Blurb for Category, used on \/electronic-parts pages."
  blurb: SupBlurb
  "Number of parts in Category."
  numParts: Int!
}

"categoryAgg produces a CategoryBucket with category + counts"
type SupCategoryBucket {
  category: SupCategory!
  count: Int
}

"A company record represents a manufacturer or distributor, depending on context."
type SupCompany {
  "Octopart internal id"
  id: ID!
  "Display name of company"
  name: String!
  "Aliases of company"
  aliases: [String!]!
  "Homepage URL of company"
  homepageUrl: String
  "Used for URLs like `\/manufacturers\/aimtec` or `\/distributors\/digi-key`"
  slug: String!
  "True if a manufacturer participates in Octopart's Verified Manufacturer program.  See [verified](https:\/\/octopart.com\/verified) for more information."
  isVerified: Boolean!
  "True if a distributor is a broker.  See [authorized](https:\/\/octopart.com\/authorized) for more information."
  isBroker: Boolean! @deprecated(reason: "use `PartSeller.is_broker` instead")
  "True if a distributor has an API integration with Octopart to provide latest pricing and stock data."
  isDistributorApi: Boolean!
}

"manufacturerAgg and distributorAgg produce a CompanyBucket with company + counts"
type SupCompanyBucket {
  company: SupCompany!
  count: Int
}

"A country's name, country code, and continent code."
type SupCountry {
  name: String!
  countryCode: String!
  continentCode: String!
}

"Textual description of a part"
type SupDescription {
  "Description text"
  text: String!
  "Source of description.  Used for attribution."
  creditString: String!
  "Source URL of description.  Used for attribution."
  creditUrl: String!
}

"Document represents a PDF file and can be a Datasheet, Compliance Document, PCN, etc."
type SupDocument {
  name: String!
  pageCount: Int
  createdAt: Time
  url: String!
  creditString: String!
  creditUrl: String!
  mimeType: String!
}

"DocumentCollection groups documents together by type: Datasheets, Compliance Statements."
type SupDocumentCollection {
  "Name of group, e.g. Datasheets"
  name: String!
  "List of Documents in group"
  documents: [SupDocument!]!
}

"Image of a part.  In the case of some symbol and footprint images, the scaled version may not actually be scaled and cropped, and may need to be scaled using CSS or other techniques."
type SupImage {
  urlLargest: String! @deprecated(reason: "use `url` instead")
  url55px: String! @deprecated(reason: "use `url` instead")
  url75px: String! @deprecated(reason: "use `url` instead")
  url90px: String! @deprecated(reason: "use `url` instead")
  "Image URL"
  url: String!
  "Source of description.  Used for attribution."
  creditString: String!
  "Source URL of description.  Used for attribution."
  creditUrl: String!
}

"An offer is a specific buyable part from a distributor, with specific packaging, pricing, stock, moq."
type SupOffer {
  "Cache ID"
  _cacheId: String!
  "Octopart internal ID for this offer"
  id: ID!
  "Stock Keeping Unit used by internally by distributor"
  sku: String!
  "Number of units available to be shipped.  (aka Stock, Quantity)"
  inventoryLevel: Int!
  "Packaging of parts (eg Tape, Reel)"
  packaging: String
  "Minimum Order Quantity: smallest number of parts that can be purchased"
  moq: Int
  prices: [SupPricePoint!]!
  "The URL to view offer on distributor website.  This will redirect via Octopart's server."
  clickUrl: String!
  "Octopart internal URL for this offer."
  internalUrl: String!
  "The last time data was received from distributor feed or API for this offer."
  updated: Time!
  "Number of days to acquire parts from factory."
  factoryLeadDays: Int
  "Number of parts on order from factory."
  onOrderQuantity: Int
  "Order multiple for factory orders."
  factoryPackQuantity: Int
  "Number of items which must be ordered together."
  orderMultiple: Int
  "The quantity of parts as packaged by the seller."
  multipackQuantity: Int
  "Whether this offer is specific to the customer making the request."
  isCustomPricing: Boolean!
}

"Part model contains the relevant data around a part, including: datasheets, specs, sellers + offers, images, etc."
type SupPart {
  "Cache ID"
  _cacheId: String!
  "Octopart internal ID for this part.  Appears at the end of PDP URL \/ `slug` field."
  id: ID!
  "manufacturer + mpn for easy display"
  name: String!
  "Manufacturer Part Number"
  mpn: String!
  "Best guess at a generic MPN"
  genericMpn: String!
  "Company that manufactures this part"
  manufacturer: SupCompany!
  "A link to the manufacturer detail page for this part or series."
  manufacturerUrl: String
  "A link to a manufacturer page to request free sample kits for this part."
  freeSampleUrl: String
  "Documents including Datasheets, Compliance Documents, PCNs"
  documentCollections: [SupDocumentCollection!]!
  "Best description around 110 characters long, as can be seen on SERP or PDP.  May need truncation if all descriptions are long."
  shortDescription: String!
  "All part descriptions from sources"
  descriptions: [SupDescription!]!
  "All part images"
  images: [SupImage!]!
  "Attribute values for this part"
  specs: [SupSpec!]!
  "Path component of PDP URL (e.g. `\/ad7792bruz-analog+devices-402798`)"
  slug: String!
  "A link to the part page on Octopart. Do not include `rel=\"nofollow\"` when linking to this URL."
  octopartUrl: String!
  "Parts identified by Octopart to be similar in specs and functionality."
  similarParts: [SupPart!]!
  "Parts identified by the manufacturer as companion products."
  companionProducts: [SupSponsoredPart!]!
  category: SupCategory
  series: SupPartSeries
  bestImage: SupImage
  bestDatasheet: SupDocument
  referenceDesigns: [SupReferenceDesign!]!
  "Data about part's CAD model.  If null `cadRequestUrl` can be used to request a CAD model be made."
  cad: SupPartCad
  "URL to request a CAD model from eeconcierge if a part doesn't already have a CAD model.  Will be null part is not eligible, e.g. a multimeter"
  cadRequestUrl: String
  "The UID from Octopart APIv3.  Provided for backwards compatibility, in general ID should be used."
  v3uid: ID!
  "A [Map](#map) of number of related objects.  Can be used to know the number of `images` or `descriptions` without having to request those related objects."
  counts: Map!
  "The median USD price at quantity 1,000, discarding outliers.  A reasonable estimate of average price for a part."
  medianPrice1000: SupPricePoint
  "Sum of stock available across all distributors"
  totalAvail: Int!
  "The average stock level at each distributor"
  avgAvail: Float!
  "Companies with Offers for this part"
  sellers(includeBrokers: Boolean! = false authorizedOnly: Boolean! = false): [SupPartSeller!]!
  "The estimated factory lead time in days derived from trusted distributor offers."
  estimatedFactoryLeadDays: Int
  "This part might be known by these alternate MPNs"
  akaMpns: [String!]!
}

type SupPartCad {
  "URL to add this part to your Upverter library. Requires an Upverter account."
  addToLibraryUrl: String
  "If true, a STEP model will be included with the tool-specific downloads."
  has3dModel: Boolean!
  hasAltium: Boolean!
  hasEagle: Boolean!
  hasOrcad: Boolean!
  hasKicad: Boolean!
  downloadUrlAltium: String!
  downloadUrlEagle: String!
  downloadUrlOrcad: String!
  downloadUrlKicad: String!
  footprintImageUrl: String
  symbolImageUrl: String
}

type SupPartMatch {
  "Will match `reference` supplied in PartMatchQuery."
  reference: String
  "Number of parts matched"
  hits: Int!
  "Matched parts (may be subset, based on start + limit)"
  parts: [SupPart!]!
  "Possible error message"
  error: String
}

type SupPartResult {
  "Cache ID"
  _cacheId: String!
  "The part object"
  part: SupPart!
  explain: String! @deprecated(reason: "always empty")
  "If the search `q` is an alternate MPN for this part, the `akaMpn` will be populated with this alternate MPN."
  akaMpn: String
  "Description with query terms highlighted.  Often this is the same as part.shortDescription,\nbut if the search `q` matched on a different description it may be longer than part.shortDescription and require truncation."
  description: String!
}

"Result of part search."
type SupPartResultSet {
  total: Int! @deprecated(reason: "use `hits` instead")
  "Number of parts in result set"
  hits: Int!
  "Contains nested part along side some fields specific to the query that explain reason for match."
  results: [SupPartResult!]
  "Grouped attributes used to render the columns in specs view."
  specsViewAttributeGroups: [SupAttributeGroup!]!
  "If an invalid query was modified or rejected, warnings indicate this fact to the user.  For example if query contained too many tokens, some tokens may be ignored."
  warnings: [String!]
  "Perform aggregations on Spec values across multiple Attributes.\nYou *must* specify `attributeNames` for this field to be populated.\n`attributeNames` should be a list of Attribute.shortname values (e.g. `capacitance` or `voltageRatingDc`)"
  specAggs("a list of Attribute.shortname values to aggregate on (e.g. `capacitance` or `voltageRatingDc`)" attributeNames: [String!]! "number of spec value buckets to return (default 10)" size: Int! = 10): [SupSpecAgg!]!
  "Aggregate on manufacturers for this result set"
  manufacturerAgg("number of buckets to return (default 10)" size: Int! = 10): [SupCompanyBucket!]!
  "Aggregate on distributors for this result set"
  distributorAgg("number of buckets to return (default 10)" size: Int! = 10): [SupCompanyBucket!]!
  "Aggregate on categories for this result set"
  categoryAgg("number of buckets to return (default 10)" size: Int! = 10): [SupCategoryBucket!]!
  "Aggregate on the availability of CAD models for the result set"
  cadAgg: [SupCadBucket!]!
  "Categories that are determined by search algo to be related to the search term.  Useful for suggesting a Category filter in the search UI."
  suggestedCategories: [SupCategoryBucket!]!
  "Attributes that are determined by search algo to be related to the search term.  Useful for suggesting most relevant filters in the search UI."
  suggestedFilters: [SupAttribute!]!
  "Full list of available Attributes in the result set"
  allFilters: [SupAttribute!]!
  "If a Category filter is applied, this will be the Category"
  appliedCategory: SupCategory
  "If filters are applied, this will contain display information"
  appliedFilters: [SupAppliedFilter!]!
}

"A company with offers for a given part"
type SupPartSeller {
  "Cache ID"
  _cacheId: String!
  "The distributor"
  company: SupCompany!
  "Distributor's country"
  country: String
  "List of offers.  Multiple offers may exist in different packaging.\nWhile multiple geo-targeted offers may exist, currently the API only exposes one geo-targeted offer at a time based on `country` parameter.\nPlease contact us if you have a need to see all geo-targeted offer variants."
  offers: [SupOffer!]!
  "True if the distributor is an authorized distributor for this manufacturer.  See [authorized](https:\/\/octopart.com\/authorized) for more information."
  isAuthorized: Boolean!
  "True if the distributor is a Non-Authorized Dealer.  See [authorized](https:\/\/octopart.com\/authorized) for more information."
  isBroker: Boolean!
  "True if you can request a quote from this seller."
  isRfq: Boolean!
  "List of countries the seller ships to. An empty list represents zero shipping restrictions."
  shipsToCountries: [SupCountry!]!
}

"A Part can be a member of a PartSeries, which represents a product line or \"family\" of parts from the manufacturer.\n\nSee [series](https:\/\/octopart.com\/series) page for examples."
type SupPartSeries {
  "Octopart internal ID for this series"
  id: ID!
  "Name of the part series"
  name: String!
  "Octopart URL for this series, specific to the parent part"
  url: String!
}

"Price in a specific currency + quantity.  By supplying a `currency` parameter the API will populate an estimated convertedPrice in the user's desired currency."
type SupPricePoint {
  "Cache ID"
  _cacheId: String!
  "Minimum purchase quantity to get this price (aka price break)"
  quantity: Int!
  "Price in currency"
  price: Float!
  "Currency for price"
  currency: String!
  "Price converted to user's currency using foreign exchange rates.\n\nSince this is an estimate, an indicator should be shown to user if currency != convertedCurrency."
  convertedPrice: Float!
  "Currency for `convertedPrice`.  Will match value of `currency` argument."
  convertedCurrency: String!
  "The exchange rate used to calculate convertedPrice"
  conversionRate: Float!
}

type SupReferenceDesign {
  name: String!
  url: String!
}

"Represents a specific value of an Attribute for a given Part"
type SupSpec {
  attribute: SupAttribute!
  "The formatted display value"
  displayValue: String!
}

type SupSpecAgg {
  attribute: SupAttribute!
  buckets: [SupSpecBucket!]!
  "min is the lowest spec value in this result set for numerical attributes"
  min: Float
  "max is the greatest spec value in this result set for numerical attributes"
  max: Float
  "displayMin is the formatted string of min"
  displayMin: String
  "displayMax is the formatted string of max"
  displayMax: String
}

type SupSpecBucket {
  "displayValue is the string value. For numerical attributes it is the formatted version of floatValue"
  displayValue: String!
  "floatValue is populated if the attribute is numeric"
  floatValue: Float
  "count will be null if aggregation timed out"
  count: Int
}

type SupSpellingCorrection {
  correctionString: String!
  hits: Int!
}

"Part identified by manufacturer as being a companion part, for instance a mated connector pair."
type SupSponsoredPart {
  "Cache ID"
  _cacheId: String!
  ppid: ID! @deprecated(reason: "use part.id instead")
  sourceId: ID! @deprecated(reason: "unused")
  "Related part"
  part: SupPart!
  "URL to visit for related part"
  url: String!
}

"Suggests a query based on partial query input.  Used for autocomplete \/ typeahead UIs."
type SupSuggestion {
  "Suggested text of longer query"
  text: String!
  "If the suggestion should also apply a categoryId filter, this is the category name"
  inCategoryName: String!
  "If the suggestion should also apply a categoryId filter, this is the Category ID"
  inCategoryId: String!
}

input SupApiCredentials {
  "The name of the API that you are providing credentials for. An Octopart representative will give this value to you if needed."
  apiName: String!
  "Authentication details. `clientId` and `clientSecret` should be given together when an API requires them."
  clientId: String
  "Authentication details. `clientId` and `clientSecret` should be given together when an API requires them."
  clientSecret: String
  "Authentication details. `username` and `password` should be given together when an API requires them."
  username: String
  "Authentication details. `username` and `password` should be given together when an API requires them."
  password: String
}

input SupPartMatchOptions {
  "If true, only parts with at least one authorized seller will be returned."
  requireAuthorizedSellers: Boolean = false
  "If true, only parts with stock available will be returned."
  requireStockAvailable: Boolean = false
  "a key: value map of filters. See [filter values](\/api\/v4\/values#filters)"
  filters: Map
}

input SupPartMatchQuery {
  mpn: String
  sku: String
  mpnOrSku: String
  manufacturer: String
  seller: String
  start: Int! = 0
  limit: Int! = 3
  reference: String
}

enum SupPlanTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SupRole {
  DISTRIBUTOR
  CADMODELS
  INTERNAL
}

enum SupSortDirection {
  asc
  desc
}

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

scalar Url

directive @BlockAll(roles: [SupRole!]!) on FIELD_DEFINITION

directive @HasPlanTier(tier: SupPlanTier!) on FIELD_DEFINITION

directive @RequireAny(roles: [SupRole!]!) on FIELD_DEFINITION

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE